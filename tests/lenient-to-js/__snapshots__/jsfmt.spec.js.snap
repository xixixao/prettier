// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrows.js - custom parser-verify 1`] = `
g = x =>
  x * square(x);

() => {}

() => ({})

() => {a: 3}

() =>
  {
    b: 3
  }

bare = () => {;}

editor.observeGrammar((x) =>
  f();
);

(
  x
  y
) => x

() =>
  // a
  return a;

// b
x

() =>
  // a
  return a

// b
x
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const g = x => {
  x * square(x);
};

() => ({});

() => ({});

() => ({a: 3});

() => ({
  b: 3
});

const bare = () => {};

editor.observeGrammar(x => {
  f();
});

(x, y) => x;

() => {
  // a
  return a;
};

// b
x;

() => {
  // a
  return a;
};

// b
x;

`;

exports[`classes.js - custom parser-verify 1`] = `
class X extends B
  other()
    da()

bla = 5

class X /* stay behind class name */
  // be inside class body
  m() {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class X extends B {
  other() {
    da();
  }
}

const bla = 5;

class X /* stay behind class name */ {
  // be inside class body
  m() {}
}

`;

exports[`comments.js - custom parser-verify 1`] = `
x = () =>
  // unreachable
  return null

for x of y
  // bla
  z()

if a
  x // blab

if a
  x // x's
  // just hanging inside if

// I'm not inside the if above

if a
  x
// right after you
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const x = () => {
  // unreachable
  return null;
};

for (const x of y) {
  // bla
  z();
}

if (a) {
  x; // blab
}

if (a) {
  x; // x's
  // just hanging inside if
}

// I'm not inside the if above

if (a) {
  x;
}
// right after you

`;

exports[`conditions.js - custom parser-verify 1`] = `

if aouhasduosahdouasdhsaoudhsaduosahdousahdsaoudhsaoduh &&
    asdhousadhsaoudhsoaudhsaoudh
  f()
else if aouhasduosahdouasdhsaoudhsaduosahdousahdsaoudhsaoduh &&
    asdhousadhsaoudhsoaudhsaoudh
  g()

if f(
      aouhasduosahdouasdhsaoudhsaduosahdousahdsaoudhsaoduh &&
        asdhousadhsaoudhsoaudhsaoudh
    )
  f()

if (x) && y
  kolo()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (
  aouhasduosahdouasdhsaoudhsaduosahdousahdsaoudhsaoduh &&
  asdhousadhsaoudhsoaudhsaoudh
) {
  f();
} else if (
  aouhasduosahdouasdhsaoudhsaduosahdousahdsaoudhsaoduh &&
  asdhousadhsaoudhsoaudhsaoudh
) {
  g();
}

if (
  f(
    aouhasduosahdouasdhsaoudhsaduosahdousahdsaoudhsaoduh &&
      asdhousadhsaoudhsoaudhsaoudh
  )
) {
  f();
}

if (x && y) {
  kolo();
}

`;

exports[`declarations.js - custom parser-verify 1`] = `
let x := 3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
let x = 3;

`;

exports[`destructure.js - custom parser-verify 1`] = `
const {x} = y
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const {x} = y;

`;

exports[`labels.js - custom parser-verify 1`] = `
;loop: for (;;)
  break

loop: X = 42;

b:
  | A
  | B = 1;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
loop: for (;;) {
  break;
}

const loop: X = 42;

const b: A | B = 1;

`;

exports[`objects.js - custom parser-verify 1`] = `
math = {
  root: Math.sqrt
  square: square
  cube: x =>
    x * sque(x);
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const math = {
  root: Math.sqrt,
  square: square,
  cube: x => {
    x * sque(x);
  }
};

`;

exports[`trycatch.js - custom parser-verify 1`] = `
try {} catch (x) {} finally {}

try
  f()
catch (e)
  g(e)

try
  f()
catch (e)
  g(e)
finally
  bam()

try
  x
  y
catch e
  z
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
try {
} catch (x) {
} finally {
}

try {
  f();
} catch (e) {
  g(e);
}

try {
  f();
} catch (e) {
  g(e);
} finally {
  bam();
}

try {
  x;
  y;
} catch (e) {
  z;
}

`;
